<?xml version="1.0" encoding="utf-8"?>
<Workflow>
  <WorkflowInfo Name="Increase incident severity every 10 minutes" Description="Check incident status and increase incident severity every 10 minutes" Details="" XML="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;SequentialWorkflowActivity x:Name=&quot;CustomWorkflow&quot; xmlns:ns0=&quot;clr-namespace:ExitWhile;Assembly=ExitWhile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns1=&quot;clr-namespace:IncidentStatus;Assembly=IncidentStatus, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns2=&quot;clr-namespace:ReturnValue;Assembly=ReturnValue, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns3=&quot;clr-namespace:GetIncidentSeverity;Assembly=GetIncidentSeverity, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns4=&quot;clr-namespace:ChangeSeverity;Assembly=ChangeSeverity, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:ns5=&quot;clr-namespace:Wait;Assembly=Wait, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null&quot; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/workflow&quot; x:Class=&quot;WorkflowDesignerControl.CustomWorkflow&quot;&gt;&lt;WhileActivity x:Name=&quot;whileActivity1&quot; Condition=&quot;{x:Null}&quot;&gt;&lt;SequenceActivity x:Name=&quot;sequenceActivity1&quot;&gt;&lt;ns0:ExitWhile IsValid=&quot;True&quot; x:Name=&quot;exitWhile1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Counter=&quot;5&quot; Description=&quot;Exit current while activity&quot; DisplayName=&quot;Exit While&quot; TypeName=&quot;ExitWhile&quot; /&gt;&lt;ns1:IncidentStatus IncidentNumber=&quot;-1&quot; isCurrent=&quot;True&quot; DeviceVariable=&quot;&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ClassificationVariable=&quot;&quot; isDefault=&quot;1&quot; IsValid=&quot;True&quot; DisplayName=&quot;Get Incident Status&quot; Number=&quot;-1&quot; x:Name=&quot;incidentStatus1&quot; Description=&quot;Check incident status&quot; TypeName=&quot;IncidentStatus&quot; Type=&quot;0&quot; Classification=&quot;-1&quot; /&gt;&lt;IfElseActivity x:Name=&quot;ifElseActivity1&quot;&gt;&lt;IfElseBranchActivity x:Name=&quot;ifElseBranchActivity1&quot;&gt;&lt;ns2:ReturnValue Value=&quot;True&quot; IsValid=&quot;True&quot; x:Name=&quot;returnValue1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ConditionName=&quot;&quot; UseBranchWhenTimeout=&quot;False&quot; UseStoredValue=&quot;True&quot; ConditionType=&quot;&quot; DisplayName=&quot;Return Value&quot; Formula=&quot;=Equals(&amp;amp;&amp;amp;&amp;amp;,True)&quot; Description=&quot;Use a returned value of a previous activity.&quot; ConditionNumber=&quot;-1&quot; UseCustomeCondition=&quot;False&quot; Type=&quot;StoredValue&quot; TypeName=&quot;ReturnValue&quot; /&gt;&lt;ns3:GetIncidentSeverity x:Name=&quot;getIncidentSeverity1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; IsValid=&quot;True&quot; DisplayName=&quot;Get Incident Severity&quot; Description=&quot;Returns the severity of the current incident or the current instance.&quot; ChosenIncident=&quot;Current instance severity&quot; TypeName=&quot;GetIncidentSeverity&quot; /&gt;&lt;IfElseActivity x:Name=&quot;ifElseActivity2&quot;&gt;&lt;IfElseBranchActivity x:Name=&quot;ifElseBranchActivity3&quot;&gt;&lt;ns2:ReturnValue Value=&quot;Critical&quot; IsValid=&quot;True&quot; x:Name=&quot;returnValue3&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ConditionName=&quot;&quot; UseBranchWhenTimeout=&quot;False&quot; UseStoredValue=&quot;False&quot; ConditionType=&quot;Equals&quot; DisplayName=&quot;Return Value&quot; Formula=&quot;=Equals(&amp;quot;&amp;amp;&amp;amp;&amp;amp;&amp;quot;,&amp;quot;Critical&amp;quot;)&quot; Description=&quot;Use a returned value of a previous activity.&quot; ConditionNumber=&quot;-1&quot; UseCustomeCondition=&quot;False&quot; Type=&quot;UserDefinedValue&quot; TypeName=&quot;ReturnValue&quot; /&gt;&lt;ns0:ExitWhile IsValid=&quot;True&quot; x:Name=&quot;exitWhile2&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Counter=&quot;0&quot; Description=&quot;Exit current while activity&quot; DisplayName=&quot;Exit While&quot; TypeName=&quot;ExitWhile&quot; /&gt;&lt;/IfElseBranchActivity&gt;&lt;IfElseBranchActivity x:Name=&quot;ifElseBranchActivity4&quot;&gt;&lt;ns2:ReturnValue Value=&quot;Default Branch&quot; IsValid=&quot;True&quot; x:Name=&quot;returnValue4&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ConditionName=&quot;&quot; UseBranchWhenTimeout=&quot;True&quot; UseStoredValue=&quot;True&quot; ConditionType=&quot;&quot; DisplayName=&quot;Return Value&quot; Formula=&quot;{x:Null}&quot; Description=&quot;Use a returned value of a previous activity.&quot; ConditionNumber=&quot;0&quot; UseCustomeCondition=&quot;False&quot; Type=&quot;StoredValue&quot; TypeName=&quot;ReturnValue&quot; /&gt;&lt;ns4:ChangeSeverity DeviceVariable=&quot;&quot; SeverityNumber=&quot;-1&quot; DisplayName=&quot;Change Severity&quot; IsValid=&quot;True&quot; Number=&quot;-1&quot; Type=&quot;0&quot; Classification=&quot;-1&quot; SeverityName=&quot;&quot; isDefault=&quot;1&quot; isCurrent=&quot;True&quot; x:Name=&quot;changeSeverity1&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Description=&quot;Change the severity of an incident.&quot; ClassificationVariable=&quot;&quot; IncidentNumber=&quot;-1&quot; TypeName=&quot;ChangeSeverity&quot; /&gt;&lt;ns5:Wait IsValid=&quot;True&quot; x:Name=&quot;wait1&quot; TimeInterval=&quot;&quot; isDefault=&quot;0&quot; DisplayName=&quot;Wait&quot; TimeInSeconds=&quot;600&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Description=&quot;Pause workflow&quot; TypeName=&quot;Wait&quot; TimeValue=&quot;&quot; Timeout=&quot;00:10:00&quot; /&gt;&lt;/IfElseBranchActivity&gt;&lt;/IfElseActivity&gt;&lt;/IfElseBranchActivity&gt;&lt;IfElseBranchActivity x:Name=&quot;ifElseBranchActivity2&quot;&gt;&lt;ns2:ReturnValue Value=&quot;False&quot; IsValid=&quot;True&quot; x:Name=&quot;returnValue2&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; ConditionName=&quot;&quot; UseBranchWhenTimeout=&quot;True&quot; UseStoredValue=&quot;True&quot; ConditionType=&quot;&quot; DisplayName=&quot;Return Value&quot; Formula=&quot;=Equals(&amp;amp;&amp;amp;&amp;amp;,False)&quot; Description=&quot;Use a returned value of a previous activity.&quot; ConditionNumber=&quot;-1&quot; UseCustomeCondition=&quot;False&quot; Type=&quot;StoredValue&quot; TypeName=&quot;ReturnValue&quot; /&gt;&lt;ns0:ExitWhile IsValid=&quot;True&quot; x:Name=&quot;exitWhile3&quot; RecoveryMethodSelection=&quot;{x:Null}&quot; Counter=&quot;0&quot; Description=&quot;Exit current while activity&quot; DisplayName=&quot;Exit While&quot; TypeName=&quot;ExitWhile&quot; /&gt;&lt;/IfElseBranchActivity&gt;&lt;/IfElseActivity&gt;&lt;/SequenceActivity&gt;&lt;/WhileActivity&gt;&lt;/SequentialWorkflowActivity&gt;" />
  <Tags>
    <Tag id="25" name="Files">
    </Tag>
    <Tag id="28" name="FTP">
    </Tag>
  </Tags>
</Workflow>